# Copyright (c) MEGVII Inc. and its affiliates. All Rights Reserved.
import collections.abc
import math
import warnings
from itertools import repeat

import torch
import torch.nn.functional as F
from torch import nn

from .ptq import QAct, QConv2d, QLinear, QOlc


def _ntuple(n):

    def parse(x):
        if isinstance(x, collections.abc.Iterable):
            return x
        return tuple(repeat(x, n))

    return parse


to_2tuple = _ntuple(2)


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1.0 + math.erf(x / math.sqrt(2.0))) / 2.0

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn(
            'mean is more than 2 std from [a, b] in nn.init.trunc_normal_. '
            'The distribution of values may be incorrect.',
            stacklevel=2,
        )

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.0))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0.0, std=1.0, a=-2.0, b=2.0):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def drop_path(x, drop_prob: float = 0.0, training: bool = False):
    """Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).
    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,
    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...
    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for
    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use
    'survival rate' as the argument.
    """
    if drop_prob == 0.0 or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0], ) + (1, ) * (
        x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
    random_tensor = keep_prob + \
        torch.rand(shape, dtype=x.dtype, device=x.device)
    random_tensor.floor_()  # binarize
    output = x.div(keep_prob) * random_tensor
    return output


class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks)."""

    def __init__(self, drop_prob=None):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training)


class Mlp(nn.Module):

    def __init__(self,
                 in_features,
                 hidden_features=None,
                 out_features=None,
                 act_layer=nn.GELU,
                 drop=0.0,
                 quant=False,
                 calibrate=False,
                 cfg=None):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.cfg = cfg
        self.in_features = in_features
        self.hidden_features = hidden_features
        self.out_features = out_features

        self.fc1 = QLinear(in_features,
                           hidden_features,
                           quant=quant,
                           calibrate=calibrate,
                           bit_type=cfg.BIT_TYPE_W,
                           calibration_mode=cfg.CALIBRATION_MODE_W,
                           observer_str=cfg.OBSERVER_W,
                           quantizer_str=cfg.QUANTIZER_W)

        ## BJ : SHIFT_SWISH 
        if(cfg.shift_swish):
            self.qact_shift = QAct(quant=quant,
                    calibrate=calibrate,
                    bit_type=cfg.BIT_TYPE_A,
                    calibration_mode=cfg.CALIBRATION_MODE_A,
                    observer_str=cfg.OBSERVER_A,
                    quantizer_str=cfg.QUANTIZER_A)
            self.act = act_layer()
            self.shift_swish = Shift_Swish()
        else:
            self.act = act_layer()
        
        
        # self.qact1 = QAct(quant=quant,
        #                   calibrate=calibrate,
        #                   bit_type=cfg.BIT_TYPE_A,
        #                   calibration_mode=cfg.CALIBRATION_MODE_A,
        #                   observer_str=cfg.OBSERVER_A,
        #                   quantizer_str=cfg.QUANTIZER_A)


        # NJ
        # self.fc2_olc_before = QAct(
        #             quant=quant,
        #             calibrate=calibrate,
        #             bit_type=cfg.BIT_TYPE_A,
        #             calibration_mode=cfg.CALIBRATION_MODE_W,
        #             observer_str=cfg.OBSERVER_A,
        #             quantizer_str=cfg.QUANTIZER_A)
        # self.fc2_olc = QOlc(in_chans= hidden_features)
        self.qact1 = QAct(
                    quant=quant,
                    calibrate=calibrate,
                    bit_type=cfg.BIT_TYPE_A,
                    calibration_mode=cfg.CALIBRATION_MODE_A,
                    observer_str=cfg.OBSERVER_A,
                    quantizer_str=cfg.QUANTIZER_A,)
        
        
        self.fc2 = QLinear(hidden_features,
                           out_features,
                           quant=quant,
                           calibrate=calibrate,
                           bit_type=cfg.BIT_TYPE_W,
                           calibration_mode=cfg.CALIBRATION_MODE_W,
                           observer_str=cfg.OBSERVER_W,
                           quantizer_str=cfg.QUANTIZER_W)
        self.qact2 = QAct(quant=quant,
                          calibrate=calibrate,
                          bit_type=cfg.BIT_TYPE_A,
                          calibration_mode=cfg.CALIBRATION_MODE_A,
                          observer_str=cfg.OBSERVER_A,
                          quantizer_str=cfg.QUANTIZER_A,
                          FC2=False)      # True/False 켰다 끄면됨, True:66.898 / Flase:66.918
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        # bj - shift_swish 
        if(self.cfg.shift_swish):
            if((self.qact_shift.calibrate == True)|(self.qact_shift.olc_calibrate == True)):
                x = self.qact_shift(x)
                x = self.act(x) 
            else:
                x = self.qact_shift.quantizer.quant(x)
                scale,zero_point = self.qact_shift.observer.get_quantization_params(x)
                x_div,s_div = self.shift_swish((x-zero_point),scale,32)
                x=(x-zero_point)*x_div*s_div*scale
        else :
            x = self.act(x)
        
        # nj
        # x = self.fc2_olc_before(x)
        # x = self.fc2_olc(x)
        x = self.qact1(x)
        
        x = self.drop(x)
        x = self.fc2(x)
        x = self.qact2(x)  # 이새끼를 조져야됨 채널별 편차 ㅈㄴ큼. 그 smooth quant를 쓰는데 activation이 relu가 아니면 못쓴다고 지적하고 고쳐서 써보자
        x = self.drop(x)
        return x


class Shift_Swish(nn.Module):
    def __init__(self):
        super().__init__()
        
        
    def forward(self, x, scale_factor,kout):
      
      i_p = x 
      i_delta  = i_p - torch.max(i_p)
      i_exp, s_exp = self.shift_exp(i_delta, scale_factor)
      i_exp_2 , s_exp_2 = self.shift_exp(-torch.max(i_p),scale_factor)
      i_div ,s_div = self.shift_div(i_exp, i_exp+i_exp_2,kout=kout)
      
      i_out = i_div 
      s_out = s_div 
      return i_out, s_out
        
        
    def shift_exp(self,I,S):
      N=32
      
      i_p  = I + I*(2**-1) - I*(2**-4)
      i_0 = torch.round(1/S)
      q = torch.floor(i_p/(-i_0)) 
      
      r = - (i_p - q * (-i_0)) 
      i_b = (-r)*(2**-1) + i_0
    
      i_exp = i_b * 2**(N-q)
      s_exp = S / (2**N)
      
      return i_exp, s_exp
       
        
    def shift_div(self,x_1,x_2,kout):
      M=41
      
      i_out = ((torch.floor(2**M/x_2)) * x_1) * (2**-(M-(kout-1)))
      s_out = 1/(2**(kout-1))
      return i_out, s_out

class PatchEmbed(nn.Module):
    """Image to Patch Embedding"""

    def __init__(self,
                 img_size=224,
                 patch_size=16,
                 in_chans=3,
                 embed_dim=768,
                 norm_layer=None,
                 quant=False,
                 calibrate=False,
                 smooth=False,
                 cfg=None):
        super().__init__()
        img_size = to_2tuple(img_size)
        patch_size = to_2tuple(patch_size)
        self.img_size = img_size
        self.patch_size = patch_size

        self.quant = quant

        self.grid_size = (img_size[0] // patch_size[0],
                          img_size[1] // patch_size[1])
        self.num_patches = self.grid_size[0] * self.grid_size[1]



        #TODO
        #DOING
        #DONE
        #HOLD
        #FIXME
        #IDEA
        
        #DOING
        
        # self.olc = cfg.OUTLIER_CLIP
        # if self.olc:
        #     self.dw_conv = QOlc(
        #                     in_chans=in_chans,
        #                     quant=quant,
        #                     calibrate=calibrate,
        #                     smooth=smooth,
        #                     bit_type=cfg.BIT_TYPE_A,
        #                     calibration_mode=cfg.CALIBRATION_MODE_A_OLC,
        #                     observer_str=cfg.OBSERVER_A_OLC,
        #                     quantizer_str=cfg.QUANTIZER_A_OLC
        #                         )

            
            
        self.proj = QConv2d(in_chans,
                            embed_dim,
                            kernel_size=patch_size,
                            stride=patch_size,
                            quant=quant,
                            calibrate=calibrate,
                            bit_type=cfg.BIT_TYPE_W,
                            calibration_mode=cfg.CALIBRATION_MODE_W,
                            observer_str=cfg.OBSERVER_W,
                            quantizer_str=cfg.QUANTIZER_W)
        if norm_layer:
            self.qact_before_norm = QAct(
                quant=quant,
                calibrate=calibrate,
                bit_type=cfg.BIT_TYPE_A,
                calibration_mode=cfg.CALIBRATION_MODE_A,
                observer_str=cfg.OBSERVER_A,
                quantizer_str=cfg.QUANTIZER_A)
            self.norm = norm_layer(embed_dim)
            self.qact = QAct(quant=quant,
                             calibrate=calibrate,
                             bit_type=cfg.BIT_TYPE_A,
                             calibration_mode=cfg.CALIBRATION_MODE_A,
                             observer_str=cfg.OBSERVER_A,
                             quantizer_str=cfg.QUANTIZER_A)
        else:
            self.qact_before_norm = nn.Identity()
            self.norm = nn.Identity()
            self.qact = QAct(quant=quant,
                             calibrate=calibrate,
                             bit_type=cfg.BIT_TYPE_A,
                             calibration_mode=cfg.CALIBRATION_MODE_A,
                             observer_str=cfg.OBSERVER_A,
                             quantizer_str=cfg.QUANTIZER_A)

    def forward(self, x):
        B, C, H, W = x.shape
        # FIXME look at relaxing size constraints
        assert (
            H == self.img_size[0] and W == self.img_size[1]
        ), f"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]})."
        
        
        # if self.olc:
        #     x = self.dw_conv(x)
        #     #x = self.dw_qact(x)
        x = self.proj(x).flatten(2).transpose(1, 2)
        x = self.qact_before_norm(x)
        if isinstance(self.norm, nn.Identity):
            x = self.norm(x)
        else:
            x = self.norm(x, self.qact_before_norm.quantizer,
                          self.qact.quantizer)
        x = self.qact(x)
        return x

    @staticmethod
    def insert(module):
        #assert isinstance(module, nn.Conv2d)
        new_module = nn.Conv2d(module.in_channels, module.in_channels, kernel_size=1, groups=module.in_channels, bias=False)
        new_module.weight = torch.nn.Parameter(torch.ones(module.in_channels, 1, 1, 1))
        module = nn.Sequential(new_module, module)
        return module

class HybridEmbed(nn.Module):
    """CNN Feature Map Embedding
    Extract feature map from CNN, flatten, project to embedding dim.
    """

    def __init__(self,
                 backbone,
                 img_size=224,
                 feature_size=None,
                 in_chans=3,
                 embed_dim=768):
        super().__init__()
        assert isinstance(backbone, nn.Module)
        img_size = to_2tuple(img_size)
        self.img_size = img_size
        self.backbone = backbone
        if feature_size is None:
            with torch.no_grad():
                # FIXME this is hacky, but most reliable way of determining the exact dim of the output feature
                # map for all networks, the feature metadata has reliable channel and stride info, but using
                # stride to calc feature dim requires info about padding of each stage that isn't captured.
                training = backbone.training
                if training:
                    backbone.eval()
                o = self.backbone(
                    torch.zeros(1, in_chans, img_size[0], img_size[1]))
                if isinstance(o, (list, tuple)):
                    # last feature if backbone outputs list/tuple of features
                    o = o[-1]
                feature_size = o.shape[-2:]
                feature_dim = o.shape[1]
                backbone.train(training)
        else:
            feature_size = to_2tuple(feature_size)
            if hasattr(self.backbone, 'feature_info'):
                feature_dim = self.backbone.feature_info.channels()[-1]
            else:
                feature_dim = self.backbone.num_features
        self.num_patches = feature_size[0] * feature_size[1]
        self.proj = nn.Conv2d(feature_dim, embed_dim, 1)

    def forward(self, x):
        x = self.backbone(x)
        if isinstance(x, (list, tuple)):
            x = x[
                -1]  # last feature if backbone outputs list/tuple of features
        x = self.proj(x).flatten(2).transpose(1, 2)
        return x
